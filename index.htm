<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>ScamGuard — Instant Scam Detector</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <style>
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap');
    body { 
      font-family: 'Inter', ui-sans-serif, system-ui; 
    }
    .slide-up {
      animation: slideUp 0.5s ease-out;
    }
    @keyframes slideUp {
      from { opacity: 0; transform: translateY(20px); }
      to { opacity: 1; transform: translateY(0); }
    }
    .hover-scale {
      transition: transform 0.2s ease;
    }
    .hover-scale:hover {
      transform: scale(1.01);
    }
  </style>
</head>
<body class="bg-gray-50 min-h-screen text-gray-900">
  <div class="max-w-4xl mx-auto p-6">
    <!-- Header -->
    <header class="mb-12 text-center">
      <div class="w-16 h-16 mx-auto mb-6 bg-blue-600 rounded-2xl flex items-center justify-center">
        <svg class="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"/>
        </svg>
      </div>
      <h1 class="text-4xl font-bold mb-4 text-gray-900">ScamGuard</h1>
      <p class="text-lg text-gray-600 max-w-2xl mx-auto leading-relaxed">
        Advanced AI-powered scam detection. Paste any suspicious message and get instant analysis to protect yourself from fraud.
      </p>
    </header>

    <!-- Main Card -->
    <div class="bg-white rounded-2xl p-8 shadow-lg border border-gray-200 hover-scale">
      <!-- Input Section -->
      <div class="mb-8">
        <label class="block text-lg font-semibold mb-4 text-gray-800">
          <svg class="w-5 h-5 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z"/>
          </svg>
          Suspicious Message
        </label>
        <div class="relative">
          <textarea id="messageInput" rows="6" 
            placeholder="📱 Paste your SMS, email, WhatsApp message, or any suspicious text here for instant analysis..."
            class="w-full p-6 rounded-xl border-2 border-gray-200 focus:border-blue-500 bg-gray-50 text-gray-800 focus:outline-none focus:bg-white transition-all placeholder-gray-500 text-base leading-relaxed resize-none"></textarea>
          <div class="absolute bottom-4 right-4 text-gray-400 text-sm" id="charCount">0 characters</div>
        </div>
      </div>

      <!-- Action Buttons -->
      <div class="flex gap-4 mb-8">
        <button id="analyzeBtn" class="flex-1 bg-blue-600 hover:bg-blue-700 text-white px-8 py-4 rounded-xl font-semibold shadow-sm transition-all hover:shadow-md hover:scale-105 flex items-center justify-center gap-2">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
          </svg>
          Analyze Message
        </button>
        <button id="clearBtn" class="bg-gray-100 hover:bg-gray-200 text-gray-700 px-6 py-4 rounded-xl font-semibold transition-all hover:scale-105 flex items-center gap-2">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
          </svg>
          Clear
        </button>
      </div>

      <!-- Loading State -->
      <div id="loading" class="hidden text-center py-8">
        <div class="inline-flex items-center gap-4 bg-blue-50 rounded-xl px-8 py-4 border border-blue-200">
          <svg class="animate-spin h-8 w-8 text-blue-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
          <div>
            <div class="text-lg font-semibold text-blue-800">Analyzing message...</div>
            <div class="text-sm text-blue-600">This may take a few seconds</div>
          </div>
        </div>
      </div>

      <!-- Results Section -->
      <div id="resultCard" class="hidden slide-up">
        <!-- Verdict Header -->
        <div class="bg-gray-50 rounded-xl p-6 mb-6 border border-gray-200">
          <div class="flex items-center justify-between mb-4">
            <h2 class="text-2xl font-bold text-gray-800 flex items-center gap-3">
              <div id="verdictIcon" class="w-10 h-10 rounded-full flex items-center justify-center">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24"></svg>
              </div>
              Analysis Complete
            </h2>
            <div id="verdictBadge" class="px-6 py-2 rounded-full text-lg font-bold"></div>
          </div>

          <!-- Confidence Score -->
          <div class="mb-4">
            <div class="flex items-center justify-between mb-2">
              <span class="text-gray-600 font-medium">Risk Level</span>
              <span id="scoreText" class="text-lg font-bold text-gray-800">—</span>
            </div>
            <div class="w-full h-4 bg-gray-200 rounded-full overflow-hidden">
              <div id="scoreBar" class="h-4 rounded-full transition-all duration-1000 ease-out" style="width:0%"></div>
            </div>
          </div>
        </div>

        <!-- Analysis Details -->
        <div class="grid md:grid-cols-2 gap-6">
          <!-- Warning Signs -->
          <div class="bg-orange-50 rounded-xl p-6 border border-orange-200">
            <h3 class="text-lg font-bold text-orange-800 mb-4 flex items-center gap-2">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.464 0L4.35 16.5c-.77.833.192 2.5 1.732 2.5z"/>
              </svg>
              Warning Signs Detected
            </h3>
            <ul id="reasonsList" class="space-y-2 text-orange-700"></ul>
          </div>

          <!-- Safety Tips -->
          <div class="bg-blue-50 rounded-xl p-6 border border-blue-200">
            <h3 class="text-lg font-bold text-blue-800 mb-4 flex items-center gap-2">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
              </svg>
              Safety Recommendations
            </h3>
            <div id="safetyTips" class="text-blue-700 text-sm leading-relaxed"></div>
          </div>
        </div>

        <!-- Original Message -->
        <div class="mt-6 bg-gray-50 rounded-xl p-6 border border-gray-200">
          <h3 class="text-lg font-bold text-gray-800 mb-4 flex items-center gap-2">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
            </svg>
            Original Message
          </h3>
          <div class="bg-white rounded-lg p-4 font-mono text-sm text-gray-700 border border-gray-200">
            <pre id="originalText" class="whitespace-pre-wrap"></pre>
          </div>
        </div>
      </div>
    </div>

    <!-- Footer -->
    <footer class="mt-12 text-center text-gray-500 text-sm">
      <p>🔒 Your messages are analyzed locally and never stored or transmitted</p>
    </footer>
  </div>

  <script>
    const analyzeBtn = document.getElementById('analyzeBtn');
    const clearBtn = document.getElementById('clearBtn');
    const messageInput = document.getElementById('messageInput');
    const charCount = document.getElementById('charCount');
    const loading = document.getElementById('loading');
    const resultCard = document.getElementById('resultCard');
    const verdictBadge = document.getElementById('verdictBadge');
    const verdictIcon = document.getElementById('verdictIcon');
    const scoreBar = document.getElementById('scoreBar');
    const scoreText = document.getElementById('scoreText');
    const reasonsList = document.getElementById('reasonsList');
    const originalText = document.getElementById('originalText');
    const safetyTips = document.getElementById('safetyTips');

    // Character counter
    messageInput.addEventListener('input', () => {
      const count = messageInput.value.length;
      charCount.textContent = `${count} characters`;
      charCount.style.color = count > 1000 ? '#dc2626' : '';
    });

    clearBtn.addEventListener('click', () => {
      messageInput.value = '';
      charCount.textContent = '0 characters';
      charCount.style.color = '';
      resultCard.classList.add('hidden');
      loading.classList.add('hidden');
      messageInput.focus();
    });

    analyzeBtn.addEventListener('click', () => {
      const text = messageInput.value.trim();
      if (!text) {
        messageInput.focus();
        messageInput.style.borderColor = '#dc2626';
        setTimeout(() => {
          messageInput.style.borderColor = '';
        }, 2000);
        return;
      }

      resultCard.classList.add('hidden');
      loading.classList.remove('hidden');

      // Simulate realistic analysis time
      setTimeout(() => {
        loading.classList.add('hidden');
        analyzeMessage(text);
      }, 2000);
    });

    function analyzeMessage(text) {
      const reasons = [];
      let score = 0;
      const textLower = text.toLowerCase();

      const patterns = [
        { name: '🔑 Requests personal credentials (PIN/OTP/Password)', regex: /\b(pin|otp|password|passcode|verification code|cvv|security code)\b/i, weight: 35 },
        { name: '⚡ Creates false urgency', regex: /\b(urgent|immediately|expires|suspend|within 24|act now|limited time)\b/i, weight: 20 },
        { name: '💰 Requests money transfers', regex: /\b(mpesa|send money|deposit|transfer|bitcoin|cryptocurrency|wire)\b/i, weight: 30 },
        { name: '🔗 Contains suspicious links', regex: /(http:\/\/|https:\/\/|bit\.ly|tinyurl|short\.link|click here)/i, weight: 25 },
        { name: '💼 Unrealistic job/money offers', regex: /\b(work from home|earn \$?\d+|guaranteed income|easy money|no experience)\b/i, weight: 20 },
        { name: '🏆 Too-good-to-be-true prizes', regex: /\b(you.*won|congratulations.*winner|claim.*prize|lottery|jackpot)\b/i, weight: 25 },
        { name: '⚠️ Threatens account closure', regex: /\b(account.*suspend|account.*close|verify.*account|update.*details)\b/i, weight: 20 },
        { name: '👤 Impersonates trusted entities', regex: /\b(bank|paypal|amazon|microsoft|apple|government|irs|police)\b/i, weight: 15 },
      ];

      for (const p of patterns) {
        if (p.regex.test(text)) {
          score += p.weight;
          reasons.push(p.name);
        }
      }

      // Grammar and spelling check for additional indicators
      const grammarIssues = (text.match(/\b(recieve|loose|there|your welcome|wont|cant)\b/gi) || []).length;
      if (grammarIssues > 0) {
        score += grammarIssues * 5;
        reasons.push('📝 Contains spelling/grammar errors');
      }

      score = Math.min(100, score);
      
      let verdict, badgeClass, iconBg, iconColor, tips, barColor;

      if (score >= 70) {
        verdict = '🚨 HIGH RISK - Likely Scam';
        badgeClass = 'bg-red-600 text-white';
        iconBg = 'bg-red-600';
        iconColor = 'text-white';
        barColor = '#dc2626';
        tips = '• Never share personal information via text/email<br>• Do not click suspicious links<br>• Contact the organization directly through official channels<br>• Report this message to authorities';
      } else if (score >= 40) {
        verdict = '⚠️ MEDIUM RISK - Be Cautious';
        badgeClass = 'bg-orange-500 text-white';
        iconBg = 'bg-orange-500';
        iconColor = 'text-white';
        barColor = '#f97316';
        tips = '• Verify sender through official channels<br>• Be cautious with any requests<br>• Double-check all links before clicking<br>• Trust your instincts';
      } else {
        verdict = '✅ LOW RISK - Appears Safe';
        badgeClass = 'bg-green-600 text-white';
        iconBg = 'bg-green-600';
        iconColor = 'text-white';
        barColor = '#16a34a';
        tips = '• Message appears legitimate<br>• Still verify sender if unsure<br>• Always practice safe online habits<br>• Report any suspicious activity';
      }

      // Update UI
      verdictBadge.textContent = verdict;
      verdictBadge.className = `px-6 py-2 rounded-full text-lg font-bold ${badgeClass}`;

      verdictIcon.className = `w-10 h-10 rounded-full flex items-center justify-center ${iconBg}`;
      verdictIcon.innerHTML = `<svg class="w-6 h-6 ${iconColor}" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="${score >= 70 ? 'M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z' : score >= 40 ? 'M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z' : 'M5 13l4 4L19 7'}"/>
      </svg>`;

      // Animate score bar
      setTimeout(() => {
        scoreBar.style.width = score + '%';
        scoreBar.style.background = barColor;
      }, 100);
      
      scoreText.textContent = score + '%';

      // Update reasons
      reasonsList.innerHTML = '';
      if (reasons.length === 0) {
        reasonsList.innerHTML = '<li class="flex items-start gap-2"><span class="text-green-600">✓</span><span>No major warning signs detected</span></li>';
      } else {
        reasons.forEach(reason => {
          const li = document.createElement('li');
          li.className = 'flex items-start gap-2';
          li.innerHTML = `<span class="text-orange-600 mt-1">•</span><span>${reason}</span>`;
          reasonsList.appendChild(li);
        });
      }

      safetyTips.innerHTML = tips;
      originalText.textContent = text;
      
      resultCard.classList.remove('hidden');
      resultCard.scrollIntoView({ behavior: 'smooth', block: 'start' });
    }

    // Add enter key support
    messageInput.addEventListener('keydown', (e) => {
      if (e.ctrlKey && e.key === 'Enter') {
        analyzeBtn.click();
      }
    });

    // Focus on input when page loads
    window.addEventListener('load', () => {
      messageInput.focus();
    });
  </script>
</body>
</html>